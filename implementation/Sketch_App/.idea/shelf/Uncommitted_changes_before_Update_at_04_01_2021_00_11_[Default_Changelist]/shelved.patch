Index: app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/view/CanvasView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.univie.se2ws2020team0310.sketch_app.view;\r\n\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.ContextWrapper;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.media.Image;\r\nimport android.media.MediaScannerConnection;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.provider.MediaStore;\r\nimport android.util.AttributeSet;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.net.URI;\r\n\r\nimport at.ac.univie.se2ws2020team0310.sketch_app.viewmodel.CanvasViewModel;\r\nimport at.ac.univie.se2ws2020team0310.sketch_app.model.graphicalElements.GraphicalElement;\r\n\r\npublic class CanvasView extends View {\r\n\r\n// Attributes\r\n\r\n    public Bitmap mBitmap;\r\n    private Canvas mCanvas;\r\n    private final CanvasViewModel canvasViewModel = new CanvasViewModel();\r\n\r\n// Constructors\r\n    public CanvasView(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    public CanvasView(Context context, @Nullable AttributeSet attrs) {\r\n        super(context, attrs);\r\n    }\r\n\r\n    public CanvasView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\r\n    public CanvasView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n    }\r\n\r\n// Getters and Setters\r\n\r\n    public CanvasViewModel getCanvasViewModel() {\r\n        return canvasViewModel;\r\n    }\r\n\r\n// Methods\r\n\r\n    @Override\r\n    protected void onSizeChanged(int width, int height, int old_width, int old_height) {\r\n        Bitmap mBitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);\r\n        mCanvas = new Canvas(mBitmap);\r\n    }\r\n\r\n    // draw the element at the position of the user's touch\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        float touchX = event.getX();\r\n        float touchY = event.getY();\r\n\r\n        switch (event.getAction()) {\r\n            case MotionEvent.ACTION_DOWN:\r\n                canvasViewModel.freehandBehaviourOnTouchDown(touchX, touchY);\r\n                canvasViewModel.elementsBehaviourOnTouchDown(touchX, touchY);\r\n                if (canvasViewModel.elementsToDraw()) {\r\n                    invalidate();\r\n                    return true;\r\n                } else {\r\n                    Log.w(\"CanvasView\", \"No object selected\");\r\n                    return false;\r\n                }\r\n\r\n            case MotionEvent.ACTION_MOVE:\r\n                canvasViewModel.freehandBehaviourOnTouchMove(touchX, touchY);\r\n                canvasViewModel.elementsBehaviourOnTouchMove(touchX, touchY);\r\n                invalidate();\r\n                return true;\r\n\r\n            case MotionEvent.ACTION_UP:\r\n                canvasViewModel.freehandBehaviourOnTouchUp(touchX, touchY);\r\n                canvasViewModel.elementsBehaviourOnTouchUp();\r\n                return true;\r\n\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        mCanvas = canvas;\r\n        super.onDraw(mCanvas);\r\n\r\n        for (GraphicalElement graphicalElement : canvasViewModel.getDrawnElements()) {\r\n            graphicalElement.draw(canvas);\r\n        }\r\n    }\r\n\r\n    public void clear() {\r\n        canvasViewModel.clearSketch();\r\n        invalidate();\r\n    }\r\n\r\n    public void deleteElement() {\r\n        canvasViewModel.deleteElement();\r\n        invalidate();\r\n    }\r\n\r\n    public void changeElementColor(int color) {\r\n        canvasViewModel.changeElementColor(color);\r\n        invalidate();\r\n    }\r\n\r\n    public void changeElementStrokeWidth(int strokewidth) {\r\n        canvasViewModel.changeElementStrokeWidth(strokewidth);\r\n        invalidate();\r\n    }\r\n\r\n    public void changeElementSize(int size) {\r\n        canvasViewModel.changeElementSize(size);\r\n        invalidate();\r\n    }\r\n\r\n    public void saveToInternalStorage(){\r\n        File dir = new File(\"/sdcard/Pictures/\");\r\n        if (!dir.exists()) {\r\n            dir.mkdirs();\r\n        }\r\n\r\n        File output = new File(dir, \"tempFile.jpg\");\r\n        OutputStream os = null;\r\n\r\n        try {\r\n            os = new FileOutputStream(output);\r\n            mBitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n            os.flush();\r\n            os.close();\r\n\r\n            //this code will scan the image so that it will appear in your gallery when you open next time\r\n            MediaScannerConnection.scanFile(this.getContext(), new String[] { output.toString() }, null,\r\n                    new MediaScannerConnection.OnScanCompletedListener() {\r\n                        public void onScanCompleted(String path, Uri uri) {\r\n                            Log.d(\"appname\", \"image is saved in gallery and gallery is refreshed.\");\r\n                        }\r\n                    }\r\n            );\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    /*public void saveImage() throws IOException {\r\n        String fileName = \"Pikasso\" + System.currentTimeMillis();\r\n\r\n        ContentValues values = new ContentValues();\r\n        values.put(MediaStore.Images.Media.TITLE, fileName);\r\n        values.put(MediaStore.Images.Media.DATE_ADDED, System.currentTimeMillis());\r\n        values.put(MediaStore.Images.Media.MIME_TYPE, \"image/jpg\");\r\n\r\n        // get a URI for the location to save the file\r\n        Uri uri = getContext().getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);\r\n\r\n        OutputStream outputStream =\r\n                getContext().getContentResolver().openOutputStream(uri);\r\n\r\n                // copy bitmap to output string created before\r\n                mCanvas.compress(Bitmap.CompressFormat.JPEG,100,outputStream); // this is our image\r\n\r\n                outputStream.flush();\r\n                outputStream.close();\r\n\r\n        Toast message = new Toast.makeText(getContext(), \"Image Saved\", Toast.LENGTH_LONG);\r\n            message.setGravity(Gravity.CENTER, message.getXOffset() /2,\r\n                message.getYOffset() /2);\r\n            message.show();\r\n\r\n    }*/\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/view/CanvasView.java	(revision 73731fd4923cb013eddacd344b83c9263a0adcb2)
+++ app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/view/CanvasView.java	(date 1609678359645)
@@ -109,7 +109,7 @@
         mCanvas = canvas;
         super.onDraw(mCanvas);
 
-        for (GraphicalElement graphicalElement : canvasViewModel.getDrawnElements()) {
+        for (GraphicalElement graphicalElement : canvasViewModel.getDrawnElements()) { // TODO: Logik -> das muss ins ViewModel
             graphicalElement.draw(canvas);
         }
     }

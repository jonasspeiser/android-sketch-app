Index: app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/model/graphicalElements/Line.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.univie.se2ws2020team0310.sketch_app.model.graphicalElements;\r\n\r\nimport at.ac.univie.se2ws2020team0310.sketch_app.model.draw.DrawStrategy;\r\n\r\npublic class Line extends GraphicalElement {\r\n\r\n// Attributes\r\n    private float startX, startY;\r\n\r\n    public Line(DrawStrategy drawStrategy) {\r\n        super(drawStrategy);\r\n    }\r\n\r\n// Getters and Setters\r\n    public float getStartX() {\r\n        return startX;\r\n    }\r\n\r\n    public float getStartY() {\r\n        return startY;\r\n    }\r\n\r\n    public void setStartCoordinates(float x, float y) {\r\n        this.startX = x;\r\n        this.startY = y;\r\n    }\r\n// Polymorphism with setter of Superclass\r\n    // if the startpoint is not defined, set position as startpoint\r\n    // else set position as endpoint\r\n    @Override\r\n    public void setCoordinates(float x, float y) {\r\n        if (getStartX() == 0 & getStartY() == 0) {\r\n            setStartCoordinates(x, y);\r\n        } else {\r\n            super.setCoordinates(x, y);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void changeCoordinates(float x, float y) {\r\n\r\n    }\r\n\r\n    public boolean isWithinElement(float x, float y) {\r\n        // TODO: implement method body\r\n        return false;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/model/graphicalElements/Line.java	(revision 92da555c1d094febdcc694600e9a799482c102f2)
+++ app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/model/graphicalElements/Line.java	(date 1609233907402)
@@ -42,6 +42,7 @@
     }
 
     public boolean isWithinElement(float x, float y) {
+
         // TODO: implement method body
         return false;
     }
Index: app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/model/Sketch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.univie.se2ws2020team0310.sketch_app.model;\r\n\r\nimport android.util.Log;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport at.ac.univie.se2ws2020team0310.sketch_app.model.graphicalElements.EGraphicalElementType;\r\nimport at.ac.univie.se2ws2020team0310.sketch_app.model.graphicalElements.GraphicalElement;\r\n\r\npublic class Sketch {\r\n\r\n// Attributes\r\n\r\n    private static final Sketch sketch = new Sketch();\r\n    private final Layer[] layers;\r\n    private Layer selectedLayer;\r\n\r\n    private GraphicalElement selectedGraphicalElement;\r\n\r\n// Constructor\r\n\r\n    private Sketch() {\r\n        this.layers = new Layer[3];\r\n        for (int i = 0; i < 3; i++) {\r\n            layers[i] = new Layer();\r\n        }\r\n        this.selectedLayer = layers[0];\r\n    }\r\n\r\n// Getters and Setters\r\n\r\n    public static Sketch getSketch() {\r\n        return sketch;\r\n    }\r\n\r\n    public Layer getSelectedLayer() {\r\n        return this.selectedLayer;\r\n    }\r\n\r\n    public void setSelectedLayer(int layerNumber) {\r\n        try {\r\n            this.selectedLayer = layers[layerNumber];\r\n        }\r\n        catch (ArrayIndexOutOfBoundsException e) {\r\n            Log.e(\"Sketch\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    public GraphicalElement getSelectedGraphicalElement() {\r\n        return selectedGraphicalElement;\r\n    }\r\n\r\n    public void setSelectedGraphicalElement(GraphicalElement selectedGraphicalElement) {\r\n        this.selectedGraphicalElement = selectedGraphicalElement;\r\n    }\r\n\r\n    public List<GraphicalElement> getDrawnElements() {\r\n        List<GraphicalElement> visibleElements = new ArrayList<>();\r\n        for (Layer layer : layers) {\r\n            if (layer.isVisible()) {\r\n                visibleElements.addAll(layer.getDrawnElements());\r\n            }\r\n        }\r\n        return  visibleElements;\r\n    }\r\n\r\n// Other Methods\r\n\r\n    public boolean layerIsEmpty() {\r\n        return selectedLayer.isEmpty();\r\n    }\r\n\r\n    public void storeElement() {\r\n        this.getSelectedLayer().storeElement(this.getSelectedGraphicalElement());\r\n    }\r\n\r\n    public void changeColor(int color) {\r\n        this.getSelectedLayer().changeColor(color);\r\n    }\r\n\r\n    public void changeStrokeWidth(float strokewidth) {\r\n        this.getSelectedLayer().changeStrokeWidth(strokewidth);\r\n    }\r\n\r\n    public void changeSize(int size) {\r\n        this.getSelectedLayer().changeSize(size);\r\n    }\r\n\r\n    public void setCoordinates(float x, float y) {\r\n        this.getSelectedLayer().setCoordinates(x, y);\r\n    }\r\n\r\n    public void changeCoordinates(float x, float y) {\r\n        this.getSelectedLayer().changeCoordinates(x, y);\r\n    }\r\n\r\n    public void deleteElement() {\r\n        selectedLayer.deleteLastElement();\r\n    }\r\n\r\n    public void clear() {\r\n        for (Layer layer : layers) {\r\n            layer.clear();\r\n        }\r\n    }\r\n\r\n    public void resetSelection() {\r\n        this.setSelectedGraphicalElement(null);\r\n    }\r\n\r\n    /**\r\n     * Checks, whether the provided coordinates are within a graphical element of the selected layer and if so, makes that element editable.\r\n     *\r\n     * @param x value on the x-axes\r\n     * @param y value on the y-axes\r\n     * @return returns true if the provided coordinates are within an element\r\n     */\r\n    public boolean isWithinElement(float x, float y) {\r\n        // TODO: We need a better name, as this method not only checks, whether a touch falls within an element, but also sets the found element \"editable\"\r\n        for (GraphicalElement graphicalElement : selectedLayer.getDrawnElements()) {\r\n               if (graphicalElement.isWithinElement(x, y)) {\r\n                    selectedLayer.editElement(graphicalElement);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n    public void selectGraphicalElement(EGraphicalElementType type, int color, float size, float strokeWidth) {\r\n        try {\r\n            this.setSelectedGraphicalElement(GraphicalElementFactory.createElement(type, color, size, strokeWidth));\r\n        } catch (AppException e) {\r\n            Log.e(\"CanvasView\", e.getMessage());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/model/Sketch.java	(revision 92da555c1d094febdcc694600e9a799482c102f2)
+++ app/src/main/java/at/ac/univie/se2ws2020team0310/sketch_app/model/Sketch.java	(date 1609236046974)
@@ -13,6 +13,7 @@
 // Attributes
 
     private static final Sketch sketch = new Sketch();
+
     private final Layer[] layers;
     private Layer selectedLayer;
 
@@ -56,7 +57,7 @@
     }
 
     public List<GraphicalElement> getDrawnElements() {
-        List<GraphicalElement> visibleElements = new ArrayList<>();
+        List<GraphicalElement> visibleElements = new ArrayList<>(); // TODO: Iterator kann hier helfen
         for (Layer layer : layers) {
             if (layer.isVisible()) {
                 visibleElements.addAll(layer.getDrawnElements());
